* INTRODUCTION TO OPERATING SYSTEMS
  Running a program basically executes instructions. The processor fetches the 
  instruction from the memory --> decodes it --> and executes it (Given by Von Neumann).

** The Three Pieces are -
*** Virtualizing -
**** CPU 
     1. Turning a single CPU (or small set of them) into a seemingly infinite 
     number of CPUs and thus allowing many programs to seemingly run at once is 
     what we call virtualizing the CPU. 
     2. It creates an illusion that a CPU is made up a number of virtual CPU's.

**** Memory
     1. Memory is just an array of bytes; to read memory, one must specify an 
     address to be able to access the data stored there; to write (or update) 
     memory, one must also specify the data to be written to the given address.
     2. Each Program has its own private memory instead of sharing the physical
     memory. Due to this two programs can have the same memory address(in name).

*** Concurrency - 
    1. Concurrency is the execution of the multiple instruction sequences at 
    the same time. It happens in the operating system when there are several 
    process threads running in parallel. The running process threads always 
    communicate with each other through shared memory or message passing. 
    2. Concurrency results in sharing of resources result in problems like 
    deadlocks and resources starvation. 

*** Persistence -
    1. We don't wanna lose data on a power outage so data is stored in hdd's 
    ssd's. 
    2.Since we have to share the data we have to make the file system 
    capable of that. Sharing data as running a c program requires writing it in
    a editor like vim --> Compile it --> execute the binary file. This requires
    the file between different programs.
    3.To make all this possible without errors we have to manage the data 
    persistently. Imagine your cat picture be a jumbled mess when you open it
    again. Systems use many protocols such as journaling or copy on write to do
    this stuff.
    
** Design Goals
    1. Virtualize the hardware.
    2. Deal with tricky issues related to concurrency.
    3. stores cat pictures persistently.
    4. Add some abstraction to make it user friendly.
    5. Performance i.e. minimize the overhead.
    6. Protection and isolating some programs.
    7. Should be reliable.
    8. Should be energy-efficient seeing the rising electricity prices.
    9. Should be secure from malware.

** History - 
    Briefly learn about the some operating systems- 
    1. [Unix](https://en.wikipedia.org/wiki/Unix)
    2. [Apple II](https://en.wikipedia.org/wiki/Apple_II)
    3. [IBM PC](https://en.wikipedia.org/wiki/IBM_Personal_Computer)
    4. [DOS](https://en.wikipedia.org/wiki/DOS)
    5. [Mac OS](https://en.wikipedia.org/wiki/MacOS)
    6. [Windows NT](https://en.wikipedia.org/wiki/Windows_NT)
    7. [Linux](https://en.wikipedia.org/wiki/Linux)

